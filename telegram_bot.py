import os
from config import tg_token
from course import *
from weather import *
from data_base import *
from print_funcs import *
from avito_parser import *
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, executor, types


storage = MemoryStorage()
bot = Bot(token=tg_token, parse_mode="html")
dp = Dispatcher(bot, storage=storage)

commands_names = ["–ê–≤–∏—Ç–æ üè¨", "–ö—É—Ä—Å üìà", "–ü–æ–≥–æ–¥–∞ üåßÔ∏è", "–ì–æ—Ä–æ–¥ üèòÔ∏è", "–ú–æ–π –≥–æ—Ä–æ–¥ üè†"]


async def main():
    await set_commands(bot)


# ? –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã
async def set_commands(bot: Bot):
    global commands
    commands = [
        types.BotCommand(
            command="/start", description="–ù–∞—á–∞—Ç—å"),
        types.BotCommand(
            command="/avito", description="–ü–æ–ª—É—á–∏—Ç—å Json –∏ CSV —Ñ–∞–π–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏"),
        types.BotCommand(command="/weather",
                         description="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ"),
        types.BotCommand(command="/course",
                         description="–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"),
        types.BotCommand(
            command="/city", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥"),
        types.BotCommand(
            command="/my_city", description="–£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –∑–∞–ø–∏—Å–∞–Ω"),
        types.BotCommand(
            command="/commands", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
    ]
    await bot.set_my_commands(commands)


# * –°—Ç–µ–π—Ç—ã –¥–ª—è –ê–≤–∏—Ç–æ
class Avito(StatesGroup):
    avito_start = State()
    search_text = State()
    min_price = State()
    max_price = State()
    sort = State()
    city = State()


# * –°—Ç–µ–π—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
class City(StatesGroup):
    city_start = State()


# ! –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True, row_width=2)
    for command in commands_names[:2]:
        btn = KeyboardButton(command)
        keyboard.add(btn)
    for command in commands_names[2:]:
        btn = KeyboardButton(command)
        keyboard.insert(btn)
    try:
        await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=keyboard)
    except Exception as ex:
        error("BOT", ex)


#! –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["help", "commands", "command", "info"])
async def send_commands(message: types.Message):
    answer = "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥</b>\n\n"
    for command in commands[:len(commands)-1]:
        command_name = command["command"]
        command_desc = command["description"]
        answer += f"<b>{command_name}</b>  ‚àí  {command_desc}\n"
    await message.answer(answer)


# ! –ö—É—Ä—Å
@dp.message_handler(Text(equals=commands_names[1]))
@dp.message_handler(commands=["course", "cur"])
async def cur_course(message: types.Message):
    try:

        await message.answer(await get_course_data(message.get_args()))

    except IndexError as ex:

        await message.answer(f"<b>–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                             f"–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–ª—é—Ç—É\n"
                             f"–ü—Ä–∏–º–µ—Ä: <b>/course usd</b>\n\n"
                             f"–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã")

    except Exception as ex:
        error("BOT", ex)


# ! –ü–æ–≥–æ–¥–∞
@dp.message_handler(Text(equals=commands_names[2]))
@dp.message_handler(commands=["weather", "wthr", "street", "temp"])
async def weather(message: types.Message):
    try:
        # * –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_id

        if message.get_args():
            await message.answer(await get_weather(message.get_args()))
        else:
            try:
                await message.answer(await get_weather(await get_user_city(user_id)))
            except Exception:
                await message.answer(
                    f"–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é <b>\"/city\"</b>\n\n"
                    f"–ü—Ä–∏–º–µ—Ä: <b>/city –ú–æ—Å–∫–≤–∞</b>")
    except Exception as ex:
        error("BOT", ex)


# ! –ú–æ–π –≥–æ—Ä–æ–¥
@dp.message_handler(Text(equals=commands_names[4]))
@dp.message_handler(commands=["my_city", "get_city"])
async def city(message: types.Message):
    try:
        await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥: {await get_user_city(message.from_id)}")
    except:
        await message.answer("–í–∞—à –≥–æ—Ä–æ–¥ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω")


#! –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞
# ? –ü—Ä–æ—Å–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(Text(equals=commands_names[3]))
@dp.message_handler(commands=["city", "set_city"])
async def city(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
    await City.city_start.set()


# ? –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ë–î
@dp.message_handler(state=City.city_start)
async def set_sity(message: types.Message, state: FSMContext):
    try:
        # * –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_id
        username = message.from_user
        user_city = await get_city_name(message.text)

        # ? –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –≤ –ë–î
        await message.answer(await set_user_city(user_id, username, user_city))

        await state.finish()

    except Exception as ex:
        await message.answer(f"–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...")
        error("BOT", ex)


#! –ê–≤–∏—Ç–æ
# ? –ü—Ä–æ—Å–∏—Ç –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
@dp.message_handler(Text(equals=commands_names[0]))
@dp.message_handler(commands=["avito", "parse"])
async def avito_parse(message: types.Message):
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å</b>")
    await Avito.avito_start.set()


@dp.message_handler(state=Avito.avito_start)  # ? –ü—Ä–æ—Å–∏—Ç MIN —Ü–µ–Ω—É
async def get_search_text(message: types.Message, state: FSMContext):
    search_text = message.text
    await state.update_data(search_text=search_text)
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É</b>")
    await Avito.min_price.set()


@dp.message_handler(state=Avito.min_price)  # ? –ü—Ä–æ—Å–∏—Ç MAX —Ü–µ–Ω—É
async def get_min_price(message: types.Message, state: FSMContext):
    min_price = message.text
    await state.update_data(min_price=min_price)
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É</b>")
    await Avito.max_price.set()


@dp.message_handler(state=Avito.max_price)  # ? –ü—Ä–æ—Å–∏—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
async def get_max_price(message: types.Message, state: FSMContext):
    max_price = message.text
    await state.update_data(max_price=max_price)
    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É</b>\n\n0 - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n1 - —Å–Ω–∞—á–∞–ª–∞ –¥–µ—à—ë–≤—ã–µ\n2 - —Å–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ")
    await Avito.sort.set()


@dp.message_handler(state=Avito.sort)  # ? –ü–∞—Ä—Å–∏—Ç –ê–≤–∏—Ç–æ –∏–ª–∏ –ø—Ä–æ—Å–∏—Ç –≥–æ—Ä–æ–¥
async def get_sort(message: types.Message, state: FSMContext):
    sort = message.text
    await state.update_data(sort=sort)
    try:
        await state.update_data(city=await get_user_city(message.from_id))
        try:
            search_text = (await state.get_data()).get("search_text")
            min_price = (await state.get_data()).get("min_price")
            max_price = (await state.get_data()).get("max_price")
            sort = (await state.get_data()).get("sort")
            city_name = (await state.get_data()).get("city")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            file_name = await parse_avito(
                text_search=search_text,
                min_price=min_price,
                max_price=max_price,
                sort=sort,
                city=city_name
            )

            file_json = f"{file_name}.json"
            file_csv = f"{file_name}.csv"

            await message.answer_document(open(f".\\bin\\avito\\{file_json}", "rb"))
            await message.answer_document(open(f".\\bin\\avito\\{file_csv}", "rb"))
            os.remove(f".\\bin\\avito\\{file_json}")
            os.remove(f".\\bin\\avito\\{file_csv}")
        except Exception as ex:
            await message.answer("–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...")
            error("BOT", ex)
        finally:
            await state.finish()
    except:
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥</b>")
        await Avito.city.set()


@dp.message_handler(state=Avito.city)  # ? –ü–∞—Ä—Å–∏—Ç –ê–≤–∏—Ç–æ
async def get_city(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    try:
        search_text = (await state.get_data()).get("search_text")
        min_price = (await state.get_data()).get("min_price")
        max_price = (await state.get_data()).get("max_price")
        sort = (await state.get_data()).get("sort")
        city_name = (await state.get_data()).get("city")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        file_name = await parse_avito(
            text_search=search_text,
            min_price=min_price,
            max_price=max_price,
            sort=sort,
            city=city_name
        )

        file_json = f"{file_name}.json"
        file_csv = f"{file_name}.json"

        await message.answer_document(open(f".\\bin\\avito\\{file_json}", "rb"))
        await message.answer_document(open(f".\\bin\\avito\\{file_csv}", "rb"))
        os.remove(f".\\bin\\avito\\{file_json}")
        os.remove(f".\\bin\\avito\\{file_csv}")
    except Exception as ex:
        await message.answer("–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...")
        error("BOT", ex)
    finally:
        await state.finish()


if __name__ == '__main__':
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(set_commands(bot=bot))
        info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        executor.start_polling(dp)
    except Exception as ex:
        error("BOT", ex)
